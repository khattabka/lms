// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
// datasource db {
//   provider  = "postgresql"
//   url  	    = env("DATABASE_URL")
//   // uncomment next line if you use Prisma <5.10
//   // directUrl = env("DATABASE_URL_UNPOOLED")
// }
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String  @id @default(cuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  categoryId String?

  attachments Attachment[]

  chapters Chapter[]

  category Category? @relation(fields: [categoryId], references: [id])

  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id     String @id @default(cuid())
  userId String
  name   String
  url    String
  type   String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  courses Course[]
}

model Chapter {
  id          String  @id @default(cuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MuxData MuxData?
}

model MuxData {
  id         String   @id @default(cuid())
  assetId    String
  playbackId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id       String @id @default(cuid())
  userId   String
  courseId String

  isCompleted Boolean @default(false)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StripeCustomer {
  id               String   @id @default(cuid())
  userId           String
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
